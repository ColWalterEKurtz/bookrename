#!/bin/bash

# ------------------------------------------------------------------------------
# settings                                                              settings
# ------------------------------------------------------------------------------
set -o errtrace  # any trap on ERR is inherited by shell functions,
                 #   command substitutions, and commands executed in a subshell
                 #   environment
set -o nounset   # treat unset variables and parameters other than the special
                 #   parameters "@" and "*" as an error when performing
                 #   parameter expansion
set -o pipefail  # the return value of a pipeline is the value of the last
                 #   (rightmost) command to exit with a non-zero status, or
                 #   zero if all commands in the pipeline exit successfully

# set language
export LANG="en_US.UTF-8"

# use dot as decimal separator
export LC_NUMERIC="en_US.UTF-8"

# terminal colors
readonly    NONE=$(tput sgr0)
readonly     RED=$(tput setaf 1)
readonly   GREEN=$(tput setaf 2)
readonly  YELLOW=$(tput setaf 3)
readonly    BLUE=$(tput setaf 4)
readonly MAGENTA=$(tput setaf 5)
readonly    CYAN=$(tput setaf 6)
readonly   WHITE=$(tput setaf 7)

# ------------------------------------------------------------------------------
# functions                                                            functions
# ------------------------------------------------------------------------------

# -------
# failmsg
# -------
#
# This function prints a red colored message via stderr.
#
function failmsg()
{
  # push to stderr
  echo -e "${RED}[FAIL]${NONE} $1" 1>&2
}

# -------
# warnmsg
# -------
#
# This function prints a yellow colored message via stderr.
#
function warnmsg()
{
  # push to stderr
  echo -e "${YELLOW}[WARN]${NONE} $1" 1>&2
}

# -------
# infomsg
# -------
#
# This function prints a blue colored message via stderr.
#
function infomsg()
{
  # push to stderr
  echo -e "${BLUE}[INFO]${NONE} $1" 1>&2
}

# -------
# donemsg
# -------
#
# This function prints a green colored message via stderr.
#
function donemsg()
{
  # push to stderr
  echo -e "${GREEN}[DONE]${NONE} $1" 1>&2
}

# ----------
# utf82ascii
# ----------
#
# ... | utf82ascii | ...
#
function utf82ascii()
{
  sed --regexp-extended \
      --expression="

        # escape all colons
        s/:/:c/g

        # escape all native question marks (iconv may introduce much more)
        s/\\?/:q/g

        # collection of characters that aren't translated (suitable) by iconv
        s/¦/|/g
        s/¡/!/g
        s/¿/:q/g
        s/„/\"/g
        s/«/\"/g
        s/»/\"/g
        s/÷/\//g
        s/±/+-/g
        s/¹/^1/g
        s/²/^2/g
        s/³/^3/g
        s/Ä/Ae/g
        s/ä/ae/g
        s/Ö/Oe/g
        s/ö/oe/g
        s/Ü/Ue/g
        s/ü/ue/g
        s/Ø/Oe/g
        s/ø/oe/g
        s/Ð/Dh/g
        s/ð/dh/g
        s/Þ/Th/g
        s/þ/th/g

      "                                       \
  | iconv --from-code "UTF-8"                 \
          --to-code "ASCII//TRANSLIT//IGNORE" \
  | sed --regexp-extended                     \
        --expression="

          # remove all question marks introduced by iconv
          s/\\?//g

          # restore all escaped question marks
          s/:q/?/g

          # restore all escaped colons
          s/:c/:/g

        "
}

# --------
# simplify
# --------
#
# ... | simplify | ...
#
function simplify()
{
  sed --regexp-extended \
      --expression="

        # replace everything but letters and numbers
        s/[^[:alnum:]]+/_/g

        # lower case
        s/.+/\L&/

        # trim both ends
        s/^_//
        s/_$//

      "
}

# -------------
# setup_window
# -------------
#
# $1  process ID
# $2  x offset
# $3  y offset
# $4  width
# $5  height
# $6  always on top:
#     0 = NO
#     1 = YES
#
function setup_window()
{
  # name positional parameters
  local readonly PRID="$1"
  local readonly POSX="$2"
  local readonly POSY="$3"
  local readonly WINW="$4"
  local readonly WINH="$5"
  local readonly ATOP="$6"

  # reset window ID
  local WID=""

  # wait for window to be shown
  while [ -z "$WID" ]
  do

    # get window ID
    local WID=$(wmctrl -lp | sed -nre "s/^(0x[[:xdigit:]]+) +[^[:space:]]+ +$PRID .+/\1/p")

  done &>"/dev/null" 

  # disable fullscreen
  wmctrl -ir "$WID" -b "remove,fullscreen"
  wmctrl -ir "$WID" -b "remove,maximized_vert"
  wmctrl -ir "$WID" -b "remove,maximized_horz"

  # move and resize window
  #   A move and resize argument has the format 'g,x,y,w,h'. All five components
  #   are integers. The first value, g, is the gravity of the window, with 0
  #   being the most common value (the default value for the window).
  #   The four remaining values are a standard geometry specification: x,y is the
  #   position of the top left corner of the window, and w,h is the width and height
  #   of the window, with the exception that the value of -1 in any position is
  #   interpreted to mean that the current geometry value should not be modified.
  wmctrl -ir "$WID" -e "0,$POSX,$POSY,$WINW,$WINH"

  # check flag
  if [ "$ATOP" == "1" ] ; then

    # set 'always on top'
    wmctrl -ir "$WID" -b "add,above"

  fi
}

# -------
# get_tag
# -------
#
# $1  filename
# $2  tag name
#
function get_tag()
{
  sed --quiet           \
      --regexp-extended \
      --expression="

        # grep from start tag to end tag
        /^<$2>$/,/^<\/$2>$/ {

          # drop start and end tag
          /^<$2>$/   { d }
          /^<\/$2>$/ { d }

          # trim line
          s/[[:space:]\xC2\xAD]+/ /g
          s/^ //
          s/ $//

          # ascify special characters
          s/–/-/g
          s//9/g
          s//8/g
          s//7/g
          s//6/g
          s//5/g
          s//4/g
          s//3/g
          s//2/g
          s//1/g
          s//0/g

          # print non-empty lines
          /.+/ { p }

        }
 
      " "$1"
}

# -------------
# get_authors_t
# -------------
#
# $1  filename
#
function get_authors_t()
{
  get_tag "$1" "authors"  \
  | sed --regexp-extended \
        --expression="

          # split lines
          s|[\x02/·•]|\n|g


        "                 \
  | sed --quiet           \
        --regexp-extended \
        --expression="

          # trim line
          s/[[:space:]]+/ /g
          s/^ //
          s/ $//

          # name is already comma-separated
          /,/ { b addtag }

          # copy last name to the front
          s/(.+) ([^ ]+)$/\2, \1/

          :addtag

          # add tag to non-empty lines
          s/.+/AUTHOR=&/p

        "
}

# -------------
# get_editors_t
# -------------
#
# $1  filename
#
function get_editors_t()
{
  get_tag "$1" "editors"  \
  | sed --regexp-extended \
        --expression="

          # split lines
          s|[\x02/·•]|\n|g

        "                 \
  | sed --quiet           \
        --regexp-extended \
        --expression="

          # trim line
          s/[[:space:]]+/ /g
          s/^ //
          s/ $//

          # name is already comma-separated
          /,/ { b addtag }

          # copy last name to the front
          s/(.+) ([^ ]+)$/\2, \1/

          :addtag

          # add tag to non-empty lines
          s/.+/EDITOR=&/p

        "
}

# -----------
# get_title_t
# -----------
#
# $1  filename
#
function get_title_t()
{
  get_tag "$1" "title"    \
  | sed --quiet           \
        --regexp-extended \
        --expression="

          # append line to hold space
          H

          # last line
          $ {

            # copy hold space to pattern space
            g

            # concatenate all lines
            s/\x0A/ /g

            # trim line
            s/[[:space:]]+/ /g
            s/^ //
            s/ $//

            # add tag to non-empty lines
            s/.+/TITLE=&/p
          }
        "
}

# ----------
# get_year_t
# ----------
#
# $1  filename
#
function get_year_t()
{
  get_tag "$1" "year"     \
  | sed --quiet           \
        --regexp-extended \
        --expression="

          # append line to hold space
          H

          # last line
          $ {

            # copy hold space to pattern space
            g

            # concatenate all lines
            s/\x0A/ /g

            # trim line
            s/[[:space:]]+/ /g
            s/^ //
            s/ $//

            # add tag to non-empty lines
            s/.+/YEAR=&/p
          }
        "
}

# ------------
# get_author_k
# ------------
#
# This function returns all AUTHOR tags from the given file.
#
# $1  filename
#
function get_authors_k()
{
  sed --quiet           \
      --regexp-extended \
      --expression="

        # crop author (branch to end if no TITLE is found)
        s/^AUTHOR=(.+)/\1/ ; T

        # trim line
        s/[[:space:]]+/ /
        s/^ //
        s/ $//

        # print non-empty line
        /.+/p

      " "$1"
}

# -------------
# get_editors_k
# -------------
#
# This function returns all EDITOR tags from the given file.
#
# $1  filename
#
function get_editors_k()
{
  sed --quiet           \
      --regexp-extended \
      --expression="

        # crop author (branch to end if no TITLE is found)
        s/^EDITOR=(.+)/\1/ ; T

        # trim line
        s/[[:space:]]+/ /
        s/^ //
        s/ $//

        # print non-empty line
        /.+/p

      " "$1"
}

# -----------
# get_title_k
# -----------
#
# This function returns the TITLE tag from the given file.
#
# $1  filename
#
function get_title_k()
{
  sed --quiet           \
      --regexp-extended \
      --expression="

        # crop title (branch to end if no TITLE is found)
        s/^TITLE=(.+)/\1/ ; T

        # trim line
        s/[[:space:]]+/ /
        s/^ //
        s/ $//

        # print non-empty line
        /.+/p

        # print only first TITLE
        q

      " "$1"
}

# ----------
# get_year_k
# ----------
#
# This function returns the YEAR tag from the given file.
#
# $1  filename
#
function get_year_k()
{
  sed --quiet           \
      --regexp-extended \
      --expression="

        # crop year (branch to end if no YEAR is found)
        s/^YEAR=(.+)/\1/ ; T

        # trim line
        s/[[:space:]]+/ /
        s/^ //
        s/ $//

        # print non-empty line
        /.+/p

        # print only first YEAR
        q

      " "$1"
}

# ------------
# get_filename
# ------------
#
# $1  filename (KEY=VALUE file)
#
function get_filename()
{
  # read data from KEY=VALUE file
  local AUTHOR1=$(get_authors_k "$1" | sed -nre "1p")
  local AUTHOR2=$(get_authors_k "$1" | sed -nre "2p")
  local AUTHOR3=$(get_authors_k "$1" | sed -nre "3p")
  local EDITOR1=$(get_editors_k "$1" | sed -nre "1p")
  local EDITOR2=$(get_editors_k "$1" | sed -nre "2p")
  local EDITOR3=$(get_editors_k "$1" | sed -nre "3p")
  local   TITLE=$(get_title_k   "$1")
  local    YEAR=$(get_year_k    "$1")

  # check title
  if [ -z "$TITLE" ] ; then

    # notify user
    failmsg "no title given"

    # signalize trouble
    return 1

  fi

  # check year
  if [ -z "$YEAR" ] ; then

    # notify user
    failmsg "no year given"

    # signalize trouble
    return 1

  fi

  # editors given
  if [ -n "$EDITOR1" ] ; then

    # more than two editors
    if [ -n "$EDITOR3" ] ; then

      local NAMES="$EDITOR1 (hg) et al."

    # two editors
    elif [ -n "$EDITOR2" ] ; then

      local NAMES="$EDITOR1 (hg); $EDITOR2 (hg)"

    # one single editor
    else

      local NAMES="$EDITOR1 (hg)"

    fi

  # authors given
  elif [ -n "$AUTHOR1" ] ; then

    # more than two authors
    if [ -n "$AUTHOR3" ] ; then

      local NAMES="$AUTHOR1 et al."

    # two authors
    elif [ -n "$AUTHOR2" ] ; then

      local NAMES="$AUTHOR1; $AUTHOR2"

    # one single author
    else

      local NAMES="$AUTHOR1"

    fi

  else

    # notify user
    failmsg "at least one author or editor must be given"

    # signalize trouble
    return 1

  fi

  # create filename (no extension)
  echo "$NAMES ($YEAR): $TITLE" \
  | utf82ascii                  \
  | simplify
}

# ------------------------------------------------------------------------------
# commands                                                              commands
# ------------------------------------------------------------------------------

# check number of parameters
if (( $# != 1 )) ; then

  # notify user
  failmsg "exactly one filename must be given"

  # signalize trouble
  exit 1

fi

# check given file
if [ ! -f "$1" ] ; then

  # notify user
  failmsg "unable to locate file: \"$1\""

  # signalize trouble
  exit 1

fi

# get MIME type
MIMETYPE=$(file --brief --mime-type "$1")

# check MIME type
if [ "$MIMETYPE" != "application/pdf" ] ; then

  # notify user
  failmsg "no pdf file given: \"$1\""

  # signalize trouble
  exit 1

fi

# get directory (assert trailing slash)
DNAME=$(dirname "$1" | sed -nre "s|.+|&/| ; s|//$|/| ; /.+/p")

# check write permission
if [ ! -w "$DNAME" ] ; then

  # notify user
  failmsg "no write permission: \"$DNAME\""

  # signalize trouble
  exit 1

fi

# create temporary file
TEMPFILE1=$(mktemp --suffix=".bookrename")
TEMPFILE2=$(mktemp --suffix=".bookrename")

# clean up on exit
trap 'rm -f "$TEMPFILE1" "$TEMPFILE2"' EXIT

# redirect entire group
{

  echo "<!-- ------------------------------------------------------------ -->"
  echo "<authors>"
  echo
  echo "</authors>"
  echo "<!-- ------------------------------------------------------------ -->"
  echo "<editors>"
  echo
  echo "</editors>"
  echo "<!-- ------------------------------------------------------------ -->"
  echo "<title>"
  echo
  echo "</title>"
  echo "<!-- ------------------------------------------------------------ -->"
  echo "<year>"
  echo
  echo "</year>"
  echo "<!-- ------------------------------------------------------------ -->"

} > "$TEMPFILE1"

# open pdf file on page 3
{ xreader -i 3 "$1" & } &>"/dev/null"

# get process id
XREADERPID="$!"

# maximize xreader
setup_window "$XREADERPID" "0" "0" "1600" "849" "0"

# open leafpad
{ leafpad "$TEMPFILE1" & } &>"/dev/null"

# get process id
LEAFPADPID="$!"

# maximize xreader
setup_window "$LEAFPADPID" "1310" "105" "270" "500" "1"

# wait for leafpad to terminate
wait "$LEAFPADPID"

# read tags and write KEY=VALUE pairs
{

  get_title_t   "$TEMPFILE1"
  get_authors_t "$TEMPFILE1"
  get_editors_t "$TEMPFILE1"
  get_year_t    "$TEMPFILE1"

} > "$TEMPFILE2"

# check if file is empty (or missing)
if [ ! -s "$TEMPFILE2" ] ; then

  # check if xreader is still running
  RUNNING=$(ps -A | grep -E "^[[:space:]]*$XREADERPID[[:space:]].+xreader$")

  # check process
  if [ -n "$RUNNING" ] ; then

    # kill xreader
    kill "$XREADERPID"
    wait "$XREADERPID"

  fi &>"/dev/null"

  # finish
  exit 1

fi

# open leafpad
{ leafpad "$TEMPFILE2" & } &>"/dev/null"

# get process id
LEAFPADPID="$!"

# maximize xreader
setup_window "$LEAFPADPID" "780" "105" "800" "200" "1"

# wait for leafpad to terminate
wait "$LEAFPADPID"

# check if xreader is still running
RUNNING=$(ps -A | grep -E "^[[:space:]]*$XREADERPID[[:space:]].+xreader$")

# check process
if [ -n "$RUNNING" ] ; then

  # kill xreader
  kill "$XREADERPID"
  wait "$XREADERPID"

fi &>"/dev/null"

# check if file is empty (or missing)
if [ ! -s "$TEMPFILE2" ] ; then

  # finish
  exit 1

fi

# get bibliographic title
PDFTITLE=$(get_filename "$TEMPFILE2")

# get random hash value
HASH=$(date -Ins | sha1sum | sed -re "s/ +//")

# create new filenames
TEMPNAME=$(printf "%s%s.pdf" "$DNAME" "$HASH")
FILENAME=$(printf "%s%s.pdf" "$DNAME" "$PDFTITLE")

# temporary rename given file
mv --no-clobber "$1" "$TEMPNAME" &>"/dev/null"

# check if new filename is already present
if [ -f "$FILENAME" ] ; then

  # restore initial filename
  mv --no-clobber "$TEMPNAME" "$1" &>"/dev/null"

  # notify user
  failmsg "filename already used: $FILENAME"

  # signalize trouble
  exit 1

fi

# finally rename file
mv --no-clobber "$TEMPNAME" "$FILENAME" &>"/dev/null"

# show progress
donemsg "file renamed: $FILENAME"

# signalize success
exit 0

